{"showArrows":true,"showBullets":true,"enableSwapGesture":true,"autoCycle":true,"autoCycleTime":5,"height":200,"textBlocs":[{"id":"9421c36e-0407-4fa4-8181-eced700045ba","caption":"–¢–µ—Å—Ç —Ñ—ã–≤–∞—Ñ—ã–≤–∞—Ñ—ã–≤–∞—ã","text":"–ê—Å—Å–∞–ª–∞–º—É –ê–ª–µ–π–∫—É–º.\n–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∂–∞–Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥ –æ–±–ª–∞—Å—Ç—ã–Ω–¥–∞ –∂–∞—à–∞–ø –∂–∞—Ç–∫–∞–Ω –í–æ–ª–µ–π–±–æ–ª —Å—É–π—É—É—á—É–ª–æ—Ä—É 19.03.2023 —Å–∞–∞—Ç 16:00 –°–∏–∑–¥–µ—Ä–¥–∏  –ù–æ–æ—Ä—É–∑ –º–∞–π—Ä–∞–º—ã–Ω–∞ –∫–∞—Ä–∞—Ç–∞ , –í–∞–ª–µ–π–±–æ–ª –±–æ—é–Ω—á–∞  –æ—Ç–∫–æ—Ä—É–ª–æ —Ç—É—Ä–≥–∞–Ω  —Ç—É—Ä–Ω–∏—Ä–≥–µ —á–∞–∫—ã—Ä–∞–±—ã–∑.  –¢—É—Ä–Ω–∏—Ä\n –≠—Ä–∫–µ–∫—Ç–µ—Ä –∞—Ä–∞—Å—ã–Ω–¥–∞\"–ñ–∞—à—Ç–∞—Ä\"\n40+ –ñ–æ–≥–æ—Ä–∫—É \"–ê–≥–∞–ª–∞—Ä\"\n –ö—ã–∑ –∫–µ–ª–∏–Ω–¥–µ—Ä –∞—Ä–∞—Å—ã–Ω–¥–∞\n–ë–∏—Ä –≥–∞–Ω–∞ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–¥—ã–∫ –∂–µ—Ä–¥–µ—à—Ç–µ—Ä –∫–∞—Ç—ã—à–∞ –∞–ª–∞—Ç.\n1-–æ—Ä—É–Ω üèÜü•áüí∏üíµ\n2-–æ—Ä—É–Ω ü•àü•àü•à\n3-–æ—Ä—É–Ω ü•âü•âü•â\n–°–∏–∑–¥–µ—Ä–¥–∏ –∫—É—Ç–æ–±—É–∑ –±–∏–∑–¥–∏–Ω –¥–∞—Ä–µ–∫\n‚û°Ô∏è  –®–æ—Å—Å–µ —Ä–µ–≤–æ–ª—é—Ü–∏–∏ 84 –ê–ë\n‚û°Ô∏è–°–ø–∞—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å \"URBO\" \n‚û°Ô∏è –£—à—É–ª –∂–∞–∫–∞ –∫–∞—Ç—Ç–∞–ª—ã–Ω—ã–∑–¥–∞—Ä \n–ù—É—Ä–≥–∞–∑—ã: +79992364311\n–ù–∞—Å—ã—Ä: +79657897733\n‚û°Ô∏è –ê—Ä –±–∏—Ä –∫–∞—Ç—ã—à–∞ —Ç—É—Ä–≥–∞–Ω –∫–æ–º–∞–Ω–¥–∞–¥–∞–Ω 3000 —Ä—É–±–ª—å –≤–∑–Ω–æ—Å —á–æ–≥—É–ª—Ç—É–ª–∞—Ç","titleImage":"","images":[{"name":"Files/Images/TextBlock/9421c36e-0407-4fa4-8181-eced700045ba/00142.jpg.jpg"}]},{"id":"3562a249-4eab-4f61-8143-b06bcf49947f","caption":"asdfasdf","text":"Blast Off with Blazor: Add a shared dialog component\nIn this post, we add a dialog to get a closer look at our images.\n\nDave Brock\nDave Brock\n16 Mar 2021\nSo far in our series, we‚Äôve walked through the intro, wrote our first component, dynamically updated the HTML head from a component, isolated our service dependencies, worked on hosting our images over Azure Blob Storage and Cosmos DB, built a responsive image gallery, and implemented prerendering, and built a search-as-you-type box.\n\nWith our card layout all set and searchable, we can now build a shared dialog component. In this dialog, users can click a card to get more details about the image. The dialog will display the title, date, an explanation, the photo itself, and a link where users can open the image from my public Azure Blob Storage container.\n\nThe new dialog\nWhile building a dialog yourself seems straightforward, many nuances can make it a pain to write yourself. You‚Äôve got to apply CSS effects (like dim the background when it‚Äôs opened), make it scrollable, have it adapt to multiple screen sizes, allow keyboard input (like closing the dialog when you hit the Esc key), and so on. While there are many great options out there, I decided to use the MudBlazor component library.\n\nLet‚Äôs get started. As always, my project is out on GitHub.\n\nInstall and configure MudBlazor\nTo install MudBlazor, I ran the following dotnet CLI command from my BlastOff.Client project:\n\ndotnet add package MudBlazor\nTo prevent manual imports across the component files, I added a single @using at the bottom of my _Imports.razor file.\n\n@using MudBlazor\nThen, in Program.cs in the BlastOff.Client project, add the following services:\n\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\nusing System.Threading.Tasks;\nusing MudBlazor.Services;\n\nnamespace BlastOff.Client\n{\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var builder = WebAssemblyHostBuilder.CreateDefault(args);\n            builder.RootComponents.Add<App>(\"#app\");\n\n            // other stuff not relevant to this post\n\n            builder.Services.AddMudServices();\n            builder.Services.AddMudBlazorDialog();\n\n            await builder.Build().RunAsync();\n        }\n    }\n}\nIn the project‚Äôs wwwroot/index.html, add MudBlazor‚Äôs CSS in the <head> tag and its JS before the end of the <body> tag. (By the way, this is all in the MudBlazor documentation.)\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <!-- Condensed <head> -->\n        <link href=\"BlastOff.Client.styles.css\" rel=\"stylesheet\">\n        <link href=\"_content/MudBlazor/MudBlazor.min.css\" rel=\"stylesheet\" />\n    </head>\n\n    <body>\n    <!-- Condensed <body> -->\n    <script src=\"_framework/blazor.webassembly.js\"></script>\n    <script src=\"_content/MudBlazor/MudBlazor.min.js\"></script>\n    </body>\n</html>\nTo complete MudBlazor setup, add a MudThemeProvider and MudDialogProvider component in the Shared/MainLayout.razor file. You‚Äôll notice I can also pass global dialog parameters, like FullWidth and MaxWidth.\n\n@inherits LayoutComponentBase\n<NavBar />\n\n<div>\n    <div class=\"section columns\">\n        <main class=\"column\">\n            <MudThemeProvider/>\n            <MudDialogProvider\n                FullWidth=\"true\"\n                MaxWidth=\"MaxWidth.Small\"/>\n            @Body\n        </main>\n    </div>\n</div>\nAdd the shared dialog component\nWith MudBlazor set up and configured, let‚Äôs add a new dialog component in Shared/ImageDialog.razor.\n\nIn the @code block, we first need to wire up Submit and Cancel events. The Submit will be bound to a simple Ok dialog result, and the Cancel will assume the default behavior. MudBlazor passes down a CascadingParameter of a MudDialog. I‚Äôm also passing down ImageDetails as a parameter containing the data I‚Äôm using to populate the dialog.\n\n@code {\n    [CascadingParameter] MudDialogInstance MudDialog { get; set; }\n    [Parameter] public Image ImageDetails { get; set; }\n\n    void Submit() => MudDialog.Close(DialogResult.Ok(true));\n    void Cancel() => MudDialog.Cancel();\n}\nIn the markup, the ImageDetails model will live inside a MudDialog and the associated DialogContent and, finally, a MudContainer. After some simple Tailwind CSS styling, I‚Äôm using ImageDetails properties to populate my dialog.\n\n<MudDialog>\n    <DialogContent>\n        <MudContainer Style=\"max-height: 500px; overflow-y: scroll\">\n            <div class=\"text-gray-600 text-md-left font-semibold tracking-wide\">\n                @ImageDetails.PrettyDate\n            </div>\n            <div class=\"text-xs p-4\">\n                @ImageDetails.Explanation\n            </div>\n            <div class=\"p-4\">\n                <a href=\"@ImageDetails.Url\" target=\"_blank\">See high-quality image <i class=\"fa fa-external-link\" aria-hidden=\"true\"></i></a>\n            </div>\n            <img src=\"@ImageDetails.Url\" />\n        </MudContainer>\n    </DialogContent>\n    <DialogActions>\n        <MudButton OnClick=\"Cancel\">Cancel</MudButton>\n        <MudButton Color=\"Color.Primary\" OnClick=\"Submit\">Ok</MudButton>\n    </DialogActions>\n</MudDialog>\nAdd dialog to ImageCard\nWith the shared dialog created, now let‚Äôs add it to our existing ImageCard component. For the markup, we can inject an IDialogService and also bind an OpenDialog function to an @onclick event.\n\n@inject IDialogService DialogService\n<div class=\"image-container m-6 rounded overflow-hidden shadow-lg\"\n     @onclick=\"OpenDialog\">\n\n    <!-- All the existing markup -->\n</div>\nThe @code block includes the ImageDetails as a parameter to send to the dialog. Then, in OpenDialog, pass the ImageDetails into DialogParameters, and show the dialog.\n\n@code\n{\n    [Parameter]\n    public Image ImageDetails { get; set; }\n\n    private void OpenDialog()\n    {\n        var parameters = new DialogParameters {{\"ImageDetails\", ImageDetails}};\n        DialogService.Show<ImageDialog>(ImageDetails.Title, parameters);\n    }\n}\nBonus: Use CSS isolation for image card hover effect\nI added a hover effect, where image cards get just a little bit bigger as you hover over them. It‚Äôs a simple and subtle way to tell users, Hey, you can click on this.\n\nTransform the image card with CSS\nI‚Äôve written a few times about Blazor CSS isolation. You can check out the links for details, but it allows you to scope styles to a specific component only.\n\nTo do this, I created an ImageCard.razor.css file. The style makes the image card 10% bigger on hover.\n\n.image-container:hover {\n    transform: scale(1.10)\n}\nMission complete!\n\nWrap up\nIn this post, we used the MudBlazor component library to create a shared dialog component. We showed how to install and configure the library, create the component, and add it to our existing solution. As a bonus, we used CSS isolation to apply a nice hover effect.\n\n","titleImage":"","images":[{"name":"Files/Images/TextBlock/3562a249-4eab-4f61-8143-b06bcf49947f/karvm32.png.png"}]}],"sliders":[{"imagePath":"","title":"One","description":"","transition":"slide"},{"imagePath":"","title":"Two","description":"","transition":"slide"},{"imagePath":"Files/full-stack-hero-logo.png","title":"Three","description":"","transition":"slide"}]}